global:
  imagePullSecrets: []

nameOverride: ''
fullnameOverride: ''

prometheusOperator:
  admissionWebhooks:
    patch:
      enabled: false

kubeEtcd:
  enabled: false

kubeScheduler:
  enabled: false

prometheus:
  prometheusSpec:
    replicas: 1
    scrapeInterval: 30s
    evaluationInterval: 30s
    retention: 15d
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        cpu: 1
        memory: 4Gi
    storageSpec:
      volumeClaimTemplate:
        metadata:
          name: monitoring-prometheus
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20Gi
    additionalScrapeConfigs:
      name: monitoring-additional-scrape-config
      key: scrape-config.yaml

kubeControllerManager:
  serviceMonitor:
    interval: 60s

kubeProxy:
  enabled: true

kubeApiServer:
  serviceMonitor:
    interval: 30s

kubelet:
  serviceMonitor:
    interval: 30s

nodeExporter:
  serviceMonitor:
    interval: 30s

kubeStateMetrics:
  serviceMonitor:
    interval: 30s

alertmanager:
  configExistingSecret: monitoring-alertmanager-config
  alertmanagerSpec:
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 768Mi
    storage:
      volumeClaimTemplate:
        metadata:
          name: monitoring-alertmanager
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 2Gi

grafana:
  admin:
    existingSecret: monitoring-grafana-admin
  grafana.ini:
    analytics:
      check_for_updates: false
    security:
      allow_embedding: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://monitoring-kube-prometheus-sta-prometheus.default.svc.cluster.local:9090
          access: proxy
          isDefault: true
          editable: false
        - name: Additional-Example
          type: prometheus
          url: http://placeholder-change-me
          access: proxy
          isDefault: false
          editable: true
          jsonData:
            httpMethod: POST
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 10Gi
  sidecar:
    dashboards:
      enabled: true
      searchNamespace: ALL
      label: grafana_dashboard
      labelValue: 'true'
      folderAnnotation: grafanaFolder
      folder: cluster
    datasources:
      enabled: true

  serviceMonitor:
    enabled: true
    selfMonitor: true

alertmanagerSecret:
  create: true
  name: monitoring-alertmanager-config
  stringData:
    alertmanager.yaml: |
      route:
        receiver: example-null
        group_by: ['alertname', 'cluster', 'service']
      receivers:
        - name: example-null
      inhibit_rules: []
      # Replace this configuration by creating/updating the secret:
      # kubectl create secret generic monitoring-alertmanager-config \
      #   --from-file=alertmanager.yaml=alertmanager.yaml \
      #   --namespace default --save-config --dry-run=server
      # Then remove the placeholder receiver above.

dashboards:
  - cluster-overview.json
  - node-resources.json
  - test-server-overview.json
podMonitors: []

additionalScrapeConfigs:
  create: true
  name: monitoring-additional-scrape-config
  key: scrape-config.yaml
  data: |
    - job_name: 'kubernetes-annotation-services'
      honor_labels: true
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          regex: (https?)
          target_label: __scheme__
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          regex: (.+)
          target_label: __metrics_path__
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: service
        - source_labels: [__meta_kubernetes_pod_node_name]
          target_label: node
    - job_name: 'kubernetes-annotation-pods'
      honor_labels: true
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
          action: replace
          regex: (https?)
          target_label: __scheme__
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          regex: (.+)
          target_label: __metrics_path__
        - source_labels: [__meta_kubernetes_pod_ip, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+);(\d+)
          replacement: $1:$2
          target_label: __address__
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod
        - source_labels: [__meta_kubernetes_pod_container_name]
          target_label: container
